/*
 * Copyright Â© Oct 1, 2021 Factor-y S.r.l. (daniele.vistalli@factor-y.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cloud_y.dominoext.net;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.security.Security;

import lotus.domino.Database;
import lotus.domino.NotesException;
import lotus.domino.NotesFactory;
import lotus.domino.NotesThread;
import lotus.domino.Session;
import lotus.domino.View;
import lotus.domino.ViewEntry;
import lotus.domino.ViewEntryCollection;

/*
 *	nsfpolicy://<policyname> 
 */

public class NSFPolicyUrlConnection extends URLConnection {

    private static final int POLICY_VIEW_COLUMN_NAME = 1;
    private static final int POLICY_VIEW_COLUMN_BODY = 2;
    
    private static final String DOMINOEXT_CONFIGDB_PROP = "dominoext.configdb";
    final String CONFIGDB_DEFAULTNAME = "dominoext.nsf";
    
    String configDbName;
    String policy;

    public NSFPolicyUrlConnection(URL url) {
	super(url);
    }

    @Override
    public Object getContent() throws IOException {
	System.out.println("getContent");
	buildPolicyDocument();
	return policy;
    }

    @Override
    public String getContentType() {
	System.out.println("getContentType");
	// TODO - Check for a better content type
	return "text/plain";
    }

    @Override
    public InputStream getInputStream() throws IOException {
	System.out.println("getInputStream");
	buildPolicyDocument();
	System.out.println(policy);
	return new ByteArrayInputStream(policy.getBytes());
    }

    @Override
    public void connect() throws IOException {
	System.out.println("connect");
    }
    
    private void buildPolicyDocument() {
	
	configDbName = Security.getProperty(DOMINOEXT_CONFIGDB_PROP);
	if (configDbName == null) {
	    configDbName = CONFIGDB_DEFAULTNAME;
	}
	
	System.out.println("buildPolicyDocument using db: " + configDbName);
	try {
	    NotesThread.sinitThread();
	    Session session = NotesFactory.createSession();
	    
	    Database db = session.getDatabase("", configDbName);
	    System.out.println("Opening: " +  db.getTitle());
	    
	    View policyView = db.getView("(javaPolLookup)");
	    
	    StringBuilder builtPolicy = new StringBuilder();
	    builtPolicy.append("// Policy generated by SCY-DominoExt NSF Policy extension\n");
	    
	    ViewEntryCollection entries = policyView.getAllEntriesByKey("Y");
	    ViewEntry entry = entries.getFirstEntry();
	    while (entry != null) {
		
		builtPolicy.append("// Adding policy: " + entry.getColumnValues().get(POLICY_VIEW_COLUMN_NAME) + " / " + entry.getUniversalID());
		builtPolicy.append("\n");
		builtPolicy.append(entry.getColumnValues().get(POLICY_VIEW_COLUMN_BODY));
		builtPolicy.append("\n\n");
		
		entry = entries.getNextEntry(entry);
	    }

	    policy = builtPolicy.toString();
	    
	    entries.recycle();
	    policyView.recycle();
	    
	    db.recycle();
	    
	} catch (NotesException e) {
	    e.printStackTrace(System.out);
	    policy = "// Policy loading from NSF database failed";
	} finally {
	    NotesThread.stermThread();
	}
    }

}
